#
# NMDA Changes for NETCONF
#

This document extends the NETCONF protocol defined in RFC 6241 in
order to support the Network Management Datastore Architecture
defined in RFC 8342.

This document updates both RFC 6241 and RFC 7950.  The update to
RFC 6241 adds new operations <get-data> and <edit-data>, and
augments existing operations <lock>, <unlock>, and <validate>.
The update to RFC 7950 requires the usage of I-D.ietf-netconf-rfc7895bis
by NETCONF servers implementing the Network Management Datastore
Architecture.

RFC Ed.: Please replace "I-D.ietf-netconf-rfc7895bis" above with
its final RFC assignment and remove this note.

* Introduction

This document extends the NETCONF protocol defined in ^RFC6241^ in
order to support the Network Management Datastore Architecture (NMDA)
defined in ^RFC8342^.

This document updates ^RFC6241^ in order to enable NETCONF clients to
interact with all the datastores supported by a server implementing
the NMDA.  The update both adds new operations <get-data> and
<edit-data>, and augments existing operations <lock>, <unlock>, and
<validate>.

This document also updates ^RFC7950^ in order to enable NETCONF
clients to both discover which datastores are supported by the
NETCONF server, as well as determine which modules are supported
in each datastore.  The update requires NETCONF servers implementing
the NMDA to support ^I-D.ietf-netconf-rfc7895bis^.

** Terminology

This document uses the terminology defined by the NMDA
^RFC8342^.

The following term is defined in ^I-D.ietf-netconf-rfc7895bis^:

- YANG library checksum

The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in BCP
14, ^RFC2119^ ^RFC8174^ when, and only when, they appear in all capitals,
as shown here.

** Tree Diagrams

Tree diagrams used in this document follow the notation defined in
^RFC8340^.

* Datastore and YANG Library Requirements

RFC Ed.: Update 201X-XX-XX below with correct date.

An NMDA-compliant NETCONF server MUST support the operational state
datastore and it MUST implement at least revision 201X-XX-XX of the
"ietf-yang-library" module defined in ^I-D.ietf-netconf-rfc7895bis^.

A NETCONF client can discover which datastores and YANG modules the
server supports by reading the YANG library information from the
operational state datastore.

The server MUST advertise the following capability in the <hello>
message (line breaks and whitespaces are used for formatting reasons
only):

  urn:ietf:params:netconf:capability:yang-library:1.1?
    revision=<date>&checksum=<checksum-value>

The parameter "revision" has the same value as the revision date of
the "ietf-yang-library" module implemented by the server.  This
parameter MUST be present.

The parameter "checksum" contains the YANG library checksum
^I-D.ietf-netconf-rfc7895bis^.  This parameter MUST be present.

With this mechanism, a client can cache the supported datastores and
YANG modules for a server and only update the cache if the "checksum"
value in the <hello> message changes.

This document updates ^RFC7950^, Section 5.6.4, to allow servers to
advertise the capability :yang-library:1.1 instead of
:yang-library:1.0, and to implement the subtree "/yang-library"
^I-D.ietf-netconf-rfc7895bis^ instead of "/modules-state".

* NETCONF Extensions

This section describes the NETCONF extensions needed to support the
NMDA.  These changes are defined in a new YANG (^RFC7950^) module
"ietf-netconf-nmda".

These changes include the use of source and target parameters based on
the "datastore" identity defined in the "ietf-datastores" module
^RFC8342^.  The use of identities allows
future expansion in a way that the choice-based strategy from the
original operations (e.g., <get-config>, <edit-config>) does not.

** New NETCONF Operations

Two new operations <get-data> and <edit-data> are defined in this
document in order to support the NMDA. These operations are similar
to the <get-config> and <edit-config> operations but they can work
on an extensible set of datastores.

*** The <get-data> Operation

The <get-data> operation retrieves data from a specific NMDA
datastore.  This operation is similar to NETCONF's <get-config>
operation defined in ^RFC6241^, but it adds the flexibility to
select the source datastore.

!! include-figure get-data.tree

The "datastore" parameter indicates the datastore which is the source
of the data to be retrieved.  This is a datastore identity.

The <get-data> operation accepts a content filter parameter, similar
to the "filter" parameter of <get-config>, but using explicit nodes
for subtree filtering ("subtree-filter") and XPath filtering
("xpath-filter").

The "config-filter" parameter can be used to retrieve only "config
true" or "config false" nodes.

The "origin-filter" parameter, which can be present multiple times,
selects nodes equal to or derived from any of the given values. The
"negated-origin-filter", which can be present multiple times, selects
nodes that do are not equal or derived from any of the given values.
The "origin-filter" and "negated-origin-filter" parameters cannot be
used together.

The "max-depth" parameter can be used by the client to limit the
number of sub-tree levels that are returned in the reply.

**** With-defaults interactions

If the "with-defaults" capability is supported by the server, then the
"with-defaults" parameter, defined in ^RFC6243^, is supported for
<get-data> operations that target conventional configuration
datastores.

The "with-defaults" parameter is OPTIONAL to support for <get-data>
operations that target <operational>.  The associated capability to
indicate a server's support is identified with the URI:

  urn:ietf:params:netconf:capability:with-operational-defaults:1.0

If the "with-defaults" parameter is supported for <get-data>
operations on <operational>, then all retrieval modes specified in
either the 'basic-mode' or 'also-supported' parameters of the
"with-defaults" capability are permitted.  The behavior of the
"with-defaults" parameter for <operational> is defined as below:

- If no "with-defaults" parameter is specified, or if it is set to
  "explicit", "report-all", or "report-all-tagged", then the "in use"
  values, as defined in ^RFC8342^ section
  5.3, are returned from the operational state datastore, even if a
  node happens to have a default statement in the YANG module, and
  this default value is being used by the server.  If the
  "with-defaults" parameter is set to "report-all-tagged", any values
  that match the schema default are tagged with additional metadata,
  as described in ^RFC6243^ section 3.4.

- If the "with-defaults" parameter is set to "trim", all "in use"
  values are returned, except that the output is filtered to exclude
  any values that match the default defined in the YANG schema.

Support for "with-defaults" in <get-data> operations on any datastore
not defined in ^RFC8342^ SHOULD be defined
by the specification for the datastore.

**** Origin Metadata Attribute

The <get-data> operation defines a parameter named "with-origin",
which if present, requests that the server includes "origin" metadata
annotations in its response, as detailed in the NMDA.  This parameter
is only valid for the operational state datastore and any datastores
with identities derived from the "operational" identity.  Otherwise,
if an invalid datastore is specified then an error is returned, as
specified in "ietf-netconf-nmda" (see ^yangmod^). Note that "origin"
metadata annotations are not included in a response unless a client
explicitly requests them.

Data in the operational state datastore can come from multiple
sources.  The server should return the most accurate value for the
"origin" metadata annotation as possible, indicating the source of the
operational value, as specified in Section 5.3.4 of
^RFC8342^.

When encoding the origin metadata annotation for a hierarchy of
returned nodes, the annotation may be omitted for a child node when
the value matches that of the parent node, as described in the
"ietf-origin" YANG module ^RFC8342^.

The "with-origin" parameter is OPTIONAL to support.  It is identified
with the feature "origin".

**** Example: Retrieving an entire subtree from <running>

The following example shows the <get-data> version of the <get-config>
example shown in Section 7.1 of ^RFC6241^.

!! include-figure ex-get-data-req.xml

!! include-figure ex-get-data-reply.xml

*** The <edit-data> Operation

The <edit-data> operation changes the contents of a writable
datastore, similar to the <edit-config> operation defined in
^RFC6241^, but with additional flexibility in naming the target
datastore. If an <edit-data> operation is invoked on a non-writable
datastore, then an error is returned, as specified in
"ietf-netconf-nmda" (see ^yangmod^).

!! include-figure edit-data.tree

The "datastore" parameter is a datastore identity that indicates the
desired target datastore where changes should be made.

The "default-operation" parameter selects the default operation to
use.  It is a copy of the "default-operation" parameter of the
<edit-config> operation.

The "edit-content" parameter specifies the content for the edit
operation.  It mirrors the "edit-content" choice of the <edit-config>
operation.  Note, however, that the "config" element in the
"edit-content" choice of <edit-data> uses "anydata" (introduced in
YANG 1.1) while the "config" element in the "edit-content" choice of
<edit-config> used "anyxml".

The <edit-data> operation does not support the "error-option" and the
"test-option" parameters that were part of the <edit-config>
operation. The error behaviour of <edit-data> corresponds to the
"error-option" "rollback-on-error".

If the "with-defaults" capability is supported by the server, the
semantics of editing modes is the same as for <edit-config>, as
described in section 4.5.2 of ^RFC6243^.

Semantics for "with-defaults" in <edit-data> operations on any non
conventional configuration datastores SHOULD be defined by the
specification for the datastore.

**** Example: Setting a leaf of an interface in <running>

The following example shows the <edit-data> version of the first
<edit-config> example in Section 7.2 of ^RFC6241^, setting the
MTU to 1500 on an interface named "Ethernet0/0" in the running
configuration datastore.

!! include-figure ex-edit-data-req.xml

!! include-figure ex-edit-data-reply.xml

The other <edit-config> examples shown in Section 7.2 can be
translated to <edit-data> examples in a similar way.

** Augmentations to NETCONF Operations

Several of the operations defined in the base NETCONF YANG module
"ietf-netconf" ^RFC6241^ may be used with new datastores.  Hence, the
<lock>, <unlock>, and <validate> operations are augmented with a new
"datastore" leaf that can select the desired datastore.  If a <lock>,
<unlock>, or <validate> operation is not supported on a particular
datastore then an error is returned, as specified in
"ietf-netconf-nmda" (see ^yangmod^).

* NETCONF Datastores YANG Module @yangmod@

This module imports definitions from ^RFC6991^, ^RFC6241^, ^RFC6243^,
and ^RFC8342^.

RFC Ed.: update the date below with the date of RFC publication and
remove this note.

!! include-yang ietf-netconf-nmda.yang

* IANA Considerations

This document registers two capability identifier URNs in the "Network
Configuration Protocol (NETCONF) Capability URNs" registry:

  Index
  Capability Identifier
  ---------------------
  :yang-library
  urn:ietf:params:netconf:capability:yang-library:1.1

  :with-operational-defaults
  urn:ietf:params:netconf:capability:with-operational-defaults:1.0

This document registers a URI in the "IETF XML Registry" ^RFC3688^.
Following the format in RFC 3688, the following registration has been
made.

  URI: urn:ietf:params:xml:ns:yang:ietf-netconf-nmda

  Registrant Contact: The IESG.

  XML: N/A, the requested URI is an XML namespace.

This document registers a YANG module in the "YANG Module Names"
registry ^RFC6020^.

  name:         ietf-netconf-nmda
  namespace:    urn:ietf:params:xml:ns:yang:ietf-netconf-nmda
  prefix:       ncds
  reference:    RFC XXXX

* Security Considerations

The YANG module defined in this document extends the base operations
of the NETCONF ^RFC6241^ protocol. The lowest NETCONF layer is the
secure transport layer and the mandatory-to-implement secure transport
is Secure Shell (SSH) ^RFC6242^.

The network configuration access control model
^RFC8341^ provides the means to restrict access
for particular NETCONF users to a preconfigured subset of all
available NETCONF protocol operations and content.

The security considerations for the base NETCONF protocol operations
(see Section 9 of ^RFC6241^) apply to the new NETCONF <get-data> and
<edit-data> operations defined in this document.

# *! start-appendix
#
# * Examples

{{document:
    name ;
    ipr trust200902;
    category std;
    references references.xml;
    updates 6241, 7950;
    title "NETCONF Extensions to Support the Network Management Datastore Architecture";
    contributor "author:Martin Bjorklund:Tail-f Systems:mbj@tail-f.com";
    contributor "author:Juergen Schoenwaelder:Jacobs University:j.schoenwaelder@jacobs-university.de";
    contributor "author:Phil Shafer:Juniper Networks:phil@juniper.net";
    contributor "author:Kent Watsen:Juniper Networks:kwatsen@juniper.net";
    contributor "author:Robert Wilton:Cisco Systems:rwilton@cisco.com";
}}
