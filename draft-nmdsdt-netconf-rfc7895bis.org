# -*- org -*-

This document describes a YANG library that provides information
about all the YANG modules used by a network management server (e.g.,
a Network Configuration Protocol (NETCONF) server).  Simple caching
mechanisms are provided to allow clients to minimize retrieval of this
information.

* Introduction

There is a need for standard mechanisms to provide the operational
state of the server.  This includes, for instance, identifying the
YANG modules and datastores that are in use by a server and how
they relate to each other.

If a large number of YANG modules are utilized by the server,
then the YANG library contents needed can be relatively large.  This
information changes very infrequently, so it is important that clients
be able to cache the YANG library contents and easily identify whether
their cache is out of date.

YANG library information can be different on every server
and can change at runtime or across a server reboot.

If the server implements multiple protocols to access the
YANG-defined data, each such protocol has its own conceptual
instantiation of the YANG library.

The following information is needed by a client application
(for each YANG module in the library)
to fully utilize the YANG data modeling language:

- identifier: a unique identifier for the module that includes
the module's name, revision, features, and deviations.

- name: The name of the YANG module.

- revision: Each YANG module and submodule within the library
has a revision.  This is derived from the most
recent revision statement within the module or submodule.  If no such
revision statement exists, the module's or submodule's revision is the
zero-length string.

- submodule list: The name and revision of each submodule
used by the module MUST be identified.

- feature list: The name of each YANG feature supported by the
server, in a given context, MUST be identified.

- deviation list: The name of each YANG module used for deviation
statements, in a given context, MUST be identified.

The following information is needed by a client application
(for each datastore supported by the server) to fully access
all the YANG-modelled data available on the server:

- identity: the YANG identity for the datastore.

- properties: properties supported by the datastore.

- modules: modules supported by the datastore, including any features and deviations.


** Terminology

The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in BCP
14, ^RFC2119^.

The following terms are defined in ^RFC6241^:

- client
- server

The following terms are defined in ^RFC7950^:

- module
- submodule

The following terms are used within this document:

- YANG library: A collection of metadata describing the server's
operational state.

** Tree Diagrams

A simplified graphical representation of the data model is used in
this document.  The meaning of the symbols in these
diagrams is as follows:

- Brackets "[" and "]" enclose list keys.
- Abbreviations before data node names: "rw" means configuration
 data (read-write) and "ro" state data (read-only).
- Symbols after data node names: "?" means an optional node, "!" means
 a presence container, and "*" denotes a list and leaf-list.
- Parentheses enclose choice and case nodes, and case nodes are also
marked with a colon (":").
- Ellipsis ("...") stands for contents of subtrees that are not shown.


** Motivation for rfc7895bis

RFC Ed.: delete this section, including this note, at time of publication.

All NETCONF servers supporting YANG 1.1 ^RFC7950^ MUST support YANG Library
(see Section 5.6.4 of RFC 7950).  Similarly, all RESTCONF servers MUST
support YANG Library (see Section 10 of RFC 8040).  These requirements
are independent of if the server supports NMDA or not.

RFC 7895 has a mandatory to implement 'modules-state' tree that a server
uses to advertise all the modules it supports.  However, this module was
designed assuming the all modules would be in all datastores, and with the
same number of features and deviations.  However, this is not the case
with NMDA-compatible servers that may have some modules that only appear
in <operational> (e.g., ietf-network-topo) or only also appear in a dynamic
datastore (e.g., i2rs-ephemeral-rib).  It is also possible that a server
only implements a module in <running>, at it hasn't yet coded support for
returning the module's opstate yet.  Presumably, an NMDA-supporting server
would return all modules implemented in every datastore, but this would be
misleading to existing clients and unhelpful to NMDA-aware clients.

In the end, it appears that the 'modules-state' node should be for non-NMDA
aware clients.  For backwards compatability, an NMDA-supporting server SHOULD
populate 'modules-state' with modules that only appear in <running>.  The new
'yang-library' node would be ignored by legacy clients, while providing
all the data needed for NMDA-aware clients, which would ignore the 'modules-state'
tree.

In addition to resolving the 'modules-state' node NMDA-incompatibility issue
described above, the solution presented in this document is further motivated
by the following desires:

- leverage Section 5.6.4 of RFC 7950 and Section 10 of RFC 8040.
- indicate which modules are supported by each datastore
- enable the features and deviations to vary by datastore
- structure extensible to support schema-mount
- provide a top-level container for all server metadata



** Summary of Changes from RFC 7895

This document updates ^RFC7895^ in the following ways:

- Renames document title from "YANG Module Library" to "YANG Library".

- Adds new top-level "yang-library" container to hold many types of
  server metadata: modules supported, datastores supported, relationships
  between datastores and modules, etc.

- Deprecates the modules-state tree.


** Summary of Updates to RFC 7950

This document updates ^RFC7950^ in the following ways:

1. Section 5.6.4 says:

   A NETCONF server MUST announce the modules it implements (see
   Section 5.6.5) by implementing the YANG module "ietf-yang-library"
   defined in [RFC7895] and listing all implemented modules in the
   "/modules-state/module" list.

This should be updated to allow for also listing all implemented
modules in the "/yang-library/modules/module" list or, more generally,
use the entire YANG Library.

2. Section 5.6.4 also says:

   The parameter "module-set-id" has the same value as the leaf
   "/modules-state/module-set-id" from "ietf-yang-library".  This
   parameter MUST be present.

This should be updated to say that, for NMDA-capable servers, this
parameter has the same value as the leaf "/yang-library/module-sets/module-set/id",
for the module-set that is used by <running>.



** Summary of Updates to RFC 8040

This document updates ^RFC8040^ in the following ways:

1. Section 10.1 says that the "modules-state/module" list is mandatory.
This should be updated to allow for also listing all supported modules
in the "/yang-library/modules/module" list or, more generally, use the
entire YANG Library.



** Open Issues

- The per-datastore 'properties' idea is still being discussed.  It's
  included here so as to provide something to point at.

- There's debate if there should be a list of module-sets or if instead
  each 'module-set' should be embeded into the datastore definition.
  This discussion goes into if a datastore can reference more than one
  module-set.


* YANG Library

The "ietf-yang-library" module provides information about
the modules used by a server. This module is defined
using YANG version 1, but it supports the description of YANG modules
written in any revision of YANG.

Following is the YANG Tree Diagram for the "ietf-yang-library" module,
including the deprecated 'modules-state' tree:

    +--ro yang-library
    |  +--ro modules
    |  |  +--ro module* [id]
    |  |     +--ro id                  string
    |  |     +--ro name?               yang:yang-identifier
    |  |     +--ro revision?           union
    |  |     +--ro schema?             inet:uri
    |  |     +--ro namespace           inet:uri
    |  |     +--ro feature*            yang:yang-identifier
    |  |     +--ro deviation* [name revision]
    |  |     |  +--ro name        yang:yang-identifier
    |  |     |  +--ro revision    union
    |  |     +--ro conformance-type    enumeration
    |  |     +--ro submodule* [name revision]
    |  |        +--ro name        yang:yang-identifier
    |  |        +--ro revision    union
    |  |        +--ro schema?     inet:uri
    |  +--ro module-sets
    |  |  +--ro module-set*
    |  |     +--ro id?       string
    |  |     +--ro module*   -> /yang-library/modules/module/id
    |  +--ro datastores
    |     +--ro datastore* [name]
    |        +--ro name           identityref
    |        +--ro properties
    |        |  +--ro property*   identityref
    |        +--ro module-sets
    |           +--ro module-set*
    |                        -> /yang-library/module-sets/module-set/id
    x--ro modules-state
       +--ro module-set-id    string
       +--ro module* [name revision]
          +--ro name                yang:yang-identifier
          +--ro revision            union
          +--ro schema?             inet:uri
          +--ro namespace           inet:uri
          +--ro feature*            yang:yang-identifier
          +--ro deviation* [name revision]
          |  +--ro name        yang:yang-identifier
          |  +--ro revision    union
          +--ro conformance-type    enumeration
          +--ro submodule* [name revision]
             +--ro name        yang:yang-identifier
             +--ro revision    union
             +--ro schema?     inet:uri

** yang-library

This mandatory container holds all of the server's metadata.

*** yang-library/modules/module

This mandatory list contains one entry for each unique instance
of a module in use by the server.  Each entry is distiguished
by the module's name, revisions, features, and deviations.

*** yang-library/module-sets/module-set

This mandatory list contains one entry for each module-set
in use by the server (e.g., presented by a datastore).

*** yang-library/datastores/datastore

This mandatory list contains one entry for each datastore
supported by the server.  Each datastore entry both identifies
any special propoerties it has and any module-sets it uses.


** modules-state

This mandatory container holds the identifiers
for the YANG data model modules supported by the server.

*** modules-state/module-set-id

This mandatory leaf contains a unique implementation-specific
identifier representing the current set of modules and submodules
on a specific server.
The value of this leaf MUST change whenever the set of modules and
submodules in the YANG library changes.  There is no requirement that
the same set always results in the same "module-set-id" value.

This leaf allows a client to fetch the module list once, cache
it, and only refetch it if the value of this leaf has been
changed.

If the value of this leaf changes, the server also generates a
"yang-library-change" notification, with the new value of
"module-set-id".

Note that for a NETCONF server that implements YANG 1.1
^RFC7950^, a change of the "module-set-id" value
results in a new value for the :yang-library capability defined in
^RFC7950^.  Thus, if such a server implements
NETCONF notifications ^RFC5277^, and the notification
"netconf-capability-change" ^RFC6470^, a "netconf-capability-change"
notification is generated whenever the "module-set-id" changes.

*** modules-state/module

This mandatory list contains one entry
for each YANG data model module supported by the server.
There MUST be an entry in this list for each revision
of each YANG module that is used by the server.
It is possible for multiple revisions of the same module
to be imported, in addition to an entry for the revision
that is implemented by the server.

** YANG Library Module @library-module@

The "ietf-yang-library" module defines monitoring
information for the YANG modules used by a server.

The modules "ietf-yang-types" and "ietf-inet-types" from ^RFC6991^
and the module "ietf-datastores" from ^I-D.ietf-netmod-revised-datastores^
are used by this module for some type definitions.

RFC Ed.: update the date below with the date of RFC publication and
remove this note.

!! include-figure ietf-yang-library.yang extract-to="ietf-yang-library@2017-06-26.yang"

* IANA Considerations @iana@

** YANG Module Registry

RFC 7895 previously registered one URI in the IETF XML registry
^RFC3688^.  Following the format in RFC 3688, the following
registration was made:

     URI: urn:ietf:params:xml:ns:yang:ietf-yang-library
     Registrant Contact: The NETCONF WG of the IETF.
     XML: N/A, the requested URI is an XML namespace.

This document takes over this registration entry made by RFC 7895.

RFC 7895 previously registered one YANG module in the 
"YANG Module Names" registry ^RFC6020^ as follows:

  name:         ietf-yang-library
  namespace:    urn:ietf:params:xml:ns:yang:ietf-yang-library
  prefix:       yanglib
  reference:    RFC 7895

This document takes over this registration entry made by RFC 7895.

* Security Considerations

The YANG module defined in this memo is designed to be accessed
via the NETCONF protocol ^RFC6241^.  The lowest NETCONF layer is
the secure transport layer and the mandatory-to-implement secure
transport is SSH ^RFC6242^.  The NETCONF access control model
^RFC6536^ provides the means to restrict access for particular
NETCONF users to a pre-configured subset of all available NETCONF
protocol operations and content.

Some of the readable data nodes in this YANG module may be
considered sensitive or vulnerable in some network environments.
It is thus important to control read access (e.g., via get,
get-config, or notification) to these data nodes.  These are the
subtrees and data nodes and their sensitivity/vulnerability:

- /modules-state/module: The module list used in a server
implementation may help an attacker identify the server capabilities
and server implementations with known bugs.
Although some of this information may
be available to all users via the NETCONF <hello> message (or similar
messages in other management protocols), this YANG module potentially
exposes additional details that could be of some assistance to an
attacker. Server vulnerabilities may be
specific to particular modules, module revisions, module features,
or even module deviations.  This information is included in each module entry.
For example, if a particular operation on a particular data node is
known to cause a server to crash or significantly degrade device performance,
then the module list information will help an
attacker identify server implementations with such a defect, in order
to launch a denial-of-service attack on the device.

* Acknowledgements

Contributions to this material by Andy Bierman are based upon work
supported by the The Space & Terrestrial Communications Directorate
(S&TCD) under Contract No. W15P7T-13-C-A616. Any opinions, findings
and conclusions or recommendations expressed in this material are
those of the author(s) and do not necessarily reflect the views of
The Space & Terrestrial Communications Directorate (S&TCD).


*! start-appendix


{{document:
    name ;
    ipr trust200902;
    category std;
    references back.xml;
    updates rfc7950, rfc8040;
    obsoletes rfc7895;
    title "YANG Library";
    abbreviation "YANG Library";
    contributor "author:Andy Bierman:YumaWorks:andy@yumaworks.com";
    contributor "author:Martin Bjorklund:Tail-f Systems:mbj@tail-f.com";
    contributor "author:Kent Watsen:Juniper Networks:kwatsen@juniper.net";
}}
