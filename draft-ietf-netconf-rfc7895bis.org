# -*- org -*-

This document describes a YANG library that provides information about
all the YANG modules and datastores used by a network management
server (e.g., a Network Configuration Protocol (NETCONF) server).
Simple caching mechanisms are provided to allow clients to minimize
retrieval of this information.

* Introduction

There is a need for standard mechanisms to provide the operational
state of a network management server.  This includes, for instance,
identifying the YANG modules and datastores that are in use by a
server and how they relate to each other.

This document defines a YANG module that can be used to provide this
informaton, in a way that is compatible with the NMDA
^I-D.ietf-netmod-revised-datastores^, but that is also backwards
compatible with the "YANG Module Library" YANG module defined in
^RFC7895^.

If a large number of YANG modules are utilized by the server,
then the YANG library contents needed can be relatively large.  This
information changes very infrequently, so it is important that clients
be able to cache the YANG library contents and easily identify whether
their cache is out of date.

YANG library information can be different on every server
and can change at runtime or across a server reboot.

If the server implements multiple protocols to access the
YANG-defined data, each such protocol has its own conceptual
instantiation of the YANG library.

The following information is needed by a client application
(for each YANG module in the library)
to fully utilize the YANG data modeling language:

- identifier: a unique identifier for the module that includes
the module's name, revision, submodules, features, and deviations.

- name: The name of the YANG module.

- revision: Each YANG module and submodule within the library SHOULD
have a revision.  This is derived from the most recent revision
statement within the module or submodule.

- submodule list: The name, and if defined, revision of each submodule
used by the module MUST be identified.

- feature list: The name of each YANG feature supported by the
server, in a given datastore schema, MUST be identified.

- deviation list: The name of each YANG module used for deviation
statements, in a given datastore schema, MUST be identified.

The following information is needed by a client application
(for each datastore supported by the server) to fully access
all the YANG-modelled data available on the server:

- identity: the YANG identity for the datastore.

- modules: modules supported by the datastore, including any features
and deviations.


** Terminology

The keywords "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in BCP
14, ^RFC2119^.

The following terms are defined in ^RFC6241^:

- client
- server

The following terms are defined in ^RFC7950^:

- module
- submodule

The following terms are defined in ^I-D.ietf-netmod-revised-datastores^:

- conventional configuration datastore
- operational datastore
- datastore schema

The following terms are used within this document:

- YANG library: A collection of metadata describing the server's
operational state.

** Tree Diagrams

A simplified graphical representation of the data model is used in
this document.  The meaning of the symbols in these
diagrams is as follows:

- Brackets "[" and "]" enclose list keys.
- Abbreviations before data node names: "rw" means configuration
 data (read-write) and "ro" state data (read-only).
- Symbols after data node names: "?" means an optional node, "!" means
 a presence container, and "*" denotes a list and leaf-list.
- Parentheses enclose choice and case nodes, and case nodes are also
marked with a colon (":").
- Ellipsis ("...") stands for contents of subtrees that are not shown.

** Motivation for rfc7895bis

RFC Ed.: delete this section, including this note, at time of publication.

All NETCONF servers supporting YANG 1.1 ^RFC7950^ MUST support YANG Library
(see Section 5.6.4 of RFC 7950).  Similarly, all RESTCONF servers MUST
support YANG Library (see Section 10 of RFC 8040).  These requirements
are independent of if the server supports NMDA or not.

RFC 7895 has a mandatory to implement "modules-state" tree that a server
uses to advertise all the modules it supports.  However, this module was
designed assuming the all modules would be in all datastores, and with the
same number of features and deviations.  However, this is not the case
with NMDA-compatible servers that may have some modules that only appear
in <operational> (e.g., ietf-network-topo) or only also appear in a dynamic
datastore (e.g., i2rs-ephemeral-rib).  It is also possible that a server
only implements a module in <running>, as it hasn't yet coded support for
returning the module's opstate yet.  Presumably, an NMDA-supporting server
would return all modules implemented in every datastore, but this would be
misleading to existing clients and unhelpful to NMDA-aware clients.

In the end, it appears that the "modules-state" node should be for non-NMDA
aware clients.  For backwards compatability, an NMDA-supporting server SHOULD
populate "modules-state" in a backwards-compatible manner.  The new
"yang-library" node would be ignored by legacy clients, while providing
all the data needed for NMDA-aware clients, which would themselves ignore
the "modules-state" tree.

The solution presented in this document is further motivated
by the following desires:

- leverage Section 5.6.4 of RFC 7950 and Section 10 of RFC 8040.
- indicate which modules are supported by each datastore
- enable the features and deviations to vary by datastore
- structure extensible to support schema-mount
- provide a top-level container for all server metadata

** Summary of Changes from RFC 7895

This document updates ^RFC7895^ in the following ways:

- Renames document title from "YANG Module Library" to "YANG Library".

- Adds a new top-level "yang-library" container to hold many types of
  server metadata: modules supported, datastores supported, relationships
  between datastores and modules, etc.

- Adds a set of new groupings as replacements for the deprecated
  "module-list" grouping.

- Adds a "yang-library-update" notification as a replacement for the
  deprecated "yang-library-change" notification.

- Deprecates the "modules-state" tree.

- Deprecates the "module-list" grouping.

- Deprecates the "yang-library-change" notification.

* YANG Library

The "ietf-yang-library" module provides information about the modules
and datastores supported by a server.  This module is defined using
YANG version 1.1, but it supports the description of YANG modules
written in any revision of YANG.

Following is the YANG Tree Diagram for the "ietf-yang-library" module,
excluding the deprecated "modules-state" tree:

!! include-figure ietf-yang-library.tree

** yang-library

This container holds all of the server's metadata.

*** yang-library/schema

An entry in the "schema" list represents the datastore schema that is
used by one or more datastores.

This list contains one entry for each schema in use by the server
(e.g., presented by a datastore).

All conventional configuration datastores and the operational
datastore use the same "schema" entry.

A dynamic configuration datastore may use a different datastore schema
from the conventional configuration datastores, and hence may require
a separate "schema" entry.

*** yang-library/schema/module

This list contains one entry for each unique instance
of a module in use by the server.  Each entry is distinguished
by the module's name, revisions, features, and deviations.

A server cannot implement different revisions of the same module in
different datastores, so there MUST only be a single revision of a
given module in the "module" list that has a "conformance-type" leaf of
"implement".

Although the server is at liberty to choose the unique "id" for each
entry in the "module" list, it is suggested to use an "id" that would
be meaningful to clients.  For example, "ietf-interfaces@2017-08-17"
could be used as the "id" for a particular revision of the IETF
interfaces YANG module.  For a module that holds deviations or
features specific to a datastore perhaps an "id" that also contains
the datastore name, like
"ietf-interfaces-deviations@2017-08-17/operational" could be used.

*** yang-library/schema/module/

The datastore schema for the operational datastore is the superset of
the datastore schema of all the configuration datastores, but can have
unsupported nodes removed via datastore specific deviations or by
omitting one or more modules from the module set associated with the
operational datastore.

However, where possible, the same module set used for conventional
configuration datatstores should also be used for the operational
datastore.  For example, deviations that are specific to "config
false" nodes could still be applied to a common module instance that
is also included in the module set used for the conventional
datastores.

Although the server is at liberty to choose the unique "id" for the
"module-set" list entry, it is suggested to choose an "id" that would be
meaningful to clients, perhaps including the datastore name if the
module set is only relevant to a single datastore.

*** yang-library/datastore

This list contains one entry for each datastore supported by the
server, and identifies the datastore schema associated with a
datastore via a reference to an entry in the "schema" list.  Each
supported conventional configuration datastore has a separate entry.

** YANG Library Module @library-module@

The "ietf-yang-library" module defines monitoring
information for the YANG modules used by a server.

The modules "ietf-yang-types" and "ietf-inet-types" from ^RFC6991^
and the module "ietf-datastores" from ^I-D.ietf-netmod-revised-datastores^
are used by this module for some type definitions.

RFC Ed.: update the date below with the date of RFC publication and
remove this note.

!! include-figure ietf-yang-library.yang extract-to="ietf-yang-library@2017-11-29.yang"

* IANA Considerations @iana@

** YANG Module Registry

RFC 7895 previously registered one URI in the IETF XML registry
^RFC3688^.  Following the format in RFC 3688, the following
registration was made:

     URI: urn:ietf:params:xml:ns:yang:ietf-yang-library
     Registrant Contact: The NETCONF WG of the IETF.
     XML: N/A, the requested URI is an XML namespace.

This document takes over this registration entry made by RFC 7895.

RFC 7895 previously registered one YANG module in the
"YANG Module Names" registry ^RFC6020^ as follows:

  name:         ietf-yang-library
  namespace:    urn:ietf:params:xml:ns:yang:ietf-yang-library
  prefix:       yanglib
  reference:    RFC 7895

This document takes over this registration entry made by RFC 7895.

* Security Considerations

The YANG module defined in this memo is designed to be accessed
via the NETCONF protocol ^RFC6241^.  The lowest NETCONF layer is
the secure transport layer and the mandatory-to-implement secure
transport is SSH ^RFC6242^.  The NETCONF access control model
^RFC6536^ provides the means to restrict access for particular
NETCONF users to a pre-configured subset of all available NETCONF
protocol operations and content.

Some of the readable data nodes in this YANG module may be
considered sensitive or vulnerable in some network environments.
It is thus important to control read access (e.g., via get,
get-config, or notification) to these data nodes.  These are the
subtrees and data nodes and their sensitivity/vulnerability:

- /modules-state/module: The module list used in a server
implementation may help an attacker identify the server capabilities
and server implementations with known bugs.
Although some of this information may
be available to all users via the NETCONF <hello> message (or similar
messages in other management protocols), this YANG module potentially
exposes additional details that could be of some assistance to an
attacker. Server vulnerabilities may be
specific to particular modules, module revisions, module features,
or even module deviations.  This information is included in each module entry.
For example, if a particular operation on a particular data node is
known to cause a server to crash or significantly degrade device performance,
then the module list information will help an
attacker identify server implementations with such a defect, in order
to launch a denial-of-service attack on the device.

* Acknowledgements

Contributions to this material by Andy Bierman are based upon work
supported by the The Space & Terrestrial Communications Directorate
(S&TCD) under Contract No. W15P7T-13-C-A616. Any opinions, findings
and conclusions or recommendations expressed in this material are
those of the author(s) and do not necessarily reflect the views of
The Space & Terrestrial Communications Directorate (S&TCD).


*! start-appendix


{{document:
    name ;
    ipr trust200902;
    category std;
    references back.xml;
    obsoletes rfc7895;
    title "YANG Library";
    abbreviation "YANG Library";
    contributor "author:Andy Bierman:YumaWorks:andy@yumaworks.com";
    contributor "author:Martin Bjorklund:Tail-f Systems:mbj@tail-f.com";
    contributor "author:Kent Watsen:Juniper Networks:kwatsen@juniper.net";
}}
